{"version":3,"sources":["components/Header.js","utils/api.js","utils/localStorage.js","components/SearchCard.js","components/RecentlySearched.js","components/CurrentWeather.js","components/ForecastCard.js","components/FiveDayCard.js","components/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Navbar","bg","variant","Container","Brand","href","units","key","iconURL","getCurrentWeather","city","a","fetch","res","ok","Error","json","getForecast","lon","lat","localStorageKey","getSavedCities","localStorage","getItem","JSON","parse","saveCities","cityArr","length","setItem","stringify","removeItem","SearchCard","setCity","setSavedCityList","useState","formState","setFormState","showAlert","setShowAlert","className","Card","Body","Alert","dismissible","onClose","show","Form","onSubmit","event","preventDefault","cityName","savedCities","invalid","forEach","push","addCity","Group","Control","type","placeholder","name","value","onChange","target","Button","color","disabled","RecentlySearched","savedCityList","reversedList","reverse","Title","ListGroup","map","ListGroupItem","onClick","index","indexOf","splice","removeCity","CurrentWeather","coord","date","useQuery","isError","isLoading","data","uv","current","timezone","Math","round","temp","weather","main","Text","alt","src","icon","feels_like","description","moment","tz","format","humidity","wind_speed","uvi","unix","sunrise","sunset","ForecastCard","dt","day","max","min","FiveDayCard","daily","pop","Row","Col","Dashboard","currentDate","fluid","md","lg","queryClient","QueryClient","App","QueryClientProvider","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0a6ff29.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Container } from 'react-bootstrap';\nconst Header = () => {\n   return (\n      <Navbar bg=\"dark\" variant=\"dark\">\n         <Container>\n            <Navbar.Brand href=\"/weather-dashboard\">Weather Dashboard</Navbar.Brand>\n         </Container>\n      </Navbar>\n   );\n};\nexport default Header;\n","const units = 'imperial';\nconst key = '1b0d53466c6b55d0c85f1d56f3184390';\nconst apiURL = 'https://api.openweathermap.org/data/2.5/weather?q=';\nconst onecallURL = 'https://api.openweathermap.org/data/2.5/onecall?lat=';\n\nexport const iconURL = 'https://openweathermap.org/img/wn/';\n\nexport const getCurrentWeather = async (city) => {\n   const res = await fetch(apiURL + city + '&appid=' + key + '&units=' + units);\n   if (!res.ok) throw new Error('Failed to fetch');\n   return res.json();\n};\nexport const getForecast = async ({ lon, lat }) => {\n   const res = await fetch(onecallURL + lat + '&lon=' + lon + '&exclude=hourly,minutely&units=' + units + '&appid=' + key);\n   if (!res.ok) throw new Error('Failed to fetch');\n   return res.json();\n};\n","export const localStorageKey = 'saved_cities';\nexport const getSavedCities = () => {\n   const savedCities = localStorage.getItem(localStorageKey) ? JSON.parse(localStorage.getItem(localStorageKey)) : [];\n\n   return savedCities;\n};\n\nexport const saveCities = cityArr => {\n   if (cityArr.length) {\n      localStorage.setItem(localStorageKey, JSON.stringify(cityArr));\n   } else {\n      localStorage.removeItem(localStorageKey);\n   }\n};\nexport const addCity = cityName => {\n   const savedCities = getSavedCities();\n   let invalid = false;\n   if (savedCities.length) {\n      savedCities.forEach(city => {\n         if (city === cityName) invalid = true;\n      });\n   }\n\n   if (!invalid) {\n      savedCities.push(cityName);\n      saveCities(savedCities);\n   }\n   return savedCities;\n};\nexport const removeCity = cityName => {\n   const savedCities = getSavedCities();\n   if (savedCities.length) {\n      const index = savedCities.indexOf(cityName);\n      savedCities.splice(index, 1);\n      saveCities(savedCities);\n   }\n   return savedCities;\n};\n","import React, { useState } from 'react';\nimport { Card, Alert, Form, Button, Container } from 'react-bootstrap';\nimport { addCity } from '../utils/localStorage';\nconst SearchCard = ({ setCity, setSavedCityList }) => {\n   const [formState, setFormState] = useState({ city: '' });\n   const [showAlert, setShowAlert] = useState(false);\n   const onSubmit = event => {\n      event.preventDefault();\n      if (!formState.city) setShowAlert(true);\n      setCity(formState.city);\n      setSavedCityList(addCity(formState.city));\n   };\n   const onChange = event => {\n      const { name, value } = event.target;\n      setFormState({\n         ...formState,\n         [name]: value,\n      });\n   };\n   return (\n      <Container className=\"my-2\">\n         <Card>\n            <Card.Body>\n               <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant=\"danger\">\n                  Something went wrong!\n               </Alert>\n               <Form onSubmit={onSubmit}>\n                  <Form.Group>\n                     <Form.Control type=\"content\" placeholder=\"Search for a city...\" name=\"city\" value={formState.city} onChange={onChange} />\n                     <Button type=\"submit\" color=\"dark blue\" disabled={!formState.city} className=\"my-2\">\n                        Search\n                     </Button>\n                  </Form.Group>\n               </Form>\n            </Card.Body>\n         </Card>\n      </Container>\n   );\n};\nexport default SearchCard;\n","import React from 'react';\nimport { Container, Card, ListGroup, ListGroupItem, Button } from 'react-bootstrap';\nimport { removeCity } from '../utils/localStorage';\nconst RecentlySearched = ({ setCity, savedCityList, setSavedCityList }) => {\n   const reversedList = savedCityList.reverse();\n   return (\n      <Container className=\"my-2\">\n         <Card>\n            <Card.Body>\n               <Card.Title>Recently Searched:</Card.Title>\n               <ListGroup className=\"list-group-flush\">\n                  {reversedList.map(city => {\n                     return (\n                        <ListGroupItem key={city}>\n                           <span onClick={() => setCity(city)}>{city}</span>{' '}\n                           <Button onClick={() => setSavedCityList(removeCity(city))}>Remove</Button>\n                        </ListGroupItem>\n                     );\n                  })}\n               </ListGroup>\n            </Card.Body>\n         </Card>\n      </Container>\n   );\n};\nexport default RecentlySearched;\n","import React, { useState } from 'react';\nimport { Container, Card, ListGroup, ListGroupItem } from 'react-bootstrap';\nimport { iconURL } from '../utils/api';\nimport { useQuery } from 'react-query';\nimport { getForecast } from '../utils/api';\nimport moment from 'moment-timezone';\nconst CurrentWeather = ({ coord, city, date }) => {\n   const { isError, isLoading, data } = useQuery(['current', coord.lon], () => getForecast(coord));\n   const handleUVColor = uv => {\n      if (uv < 3) return 'low';\n      if (uv < 6) return 'medium';\n      if (uv < 8) return 'high';\n      if (uv < 11) return 'very-high';\n      return 'extreme text-white';\n   };\n   if (isError) return <h2>error</h2>;\n   if (isLoading) return <h2>loading...</h2>;\n   const { current, timezone } = data;\n   return (\n      <>\n         <Container className=\"my-2\">\n            <Card>\n               <Card.Body>\n                  <Card.Title className=\"caps\">\n                     It is {Math.round(current.temp)}&deg; and {current.weather[0].main} in {city}\n                  </Card.Title>\n                  <Card.Text>\n                     <img alt=\"weather icon\" src={iconURL + current.weather[0].icon + '.png'} />\n                     <span className=\"mx-3\">{date}</span>\n                     <span className=\"mx-3\">Feels like {current.feels_like}&deg;</span>\n                     <span className=\"mx-3 caps\">{current.weather[0].description}</span>\n                     <p>It is {moment().tz(timezone).format('h:mm a')} here</p>\n                  </Card.Text>\n               </Card.Body>\n               <ListGroup className=\"list-group-flush\">\n                  <ListGroupItem>Humidity: {current.humidity}%</ListGroupItem>\n                  <ListGroupItem>Wind speed: {current.wind_speed} MPH</ListGroupItem>\n                  <ListGroupItem>\n                     <span className={handleUVColor(current.uvi)}>UV Index: {current.uvi}</span>\n                  </ListGroupItem>\n                  <ListGroupItem>Sunrise: {moment.unix(current.sunrise).tz(timezone).format('h:mm a')}</ListGroupItem>\n                  <ListGroupItem>Sunset: {moment.unix(current.sunset).tz(timezone).format('h:mm a')}</ListGroupItem>\n               </ListGroup>\n            </Card>\n         </Container>\n      </>\n   );\n};\nexport default CurrentWeather;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { iconURL } from '../utils/api';\nimport moment from 'moment';\nconst ForecastCard = ({ data }) => {\n   return (\n      <Card className=\"bg-primary text-light\">\n         <Card.Body>\n            <Card.Title>{moment.unix(data.dt).format('dddd')}</Card.Title>\n            <Card.Title>{moment.unix(data.dt).format('MM-DD-YY')}</Card.Title>\n            <img alt=\"forecast icon\" src={iconURL + data.weather[0].icon + '.png'} />\n            <p>Temp: {data.temp.day}&deg;F</p>\n            <p>Humidity: {data.humidity}%</p>\n            <p>High: {data.temp.max}&deg;</p>\n            <p>Low: {data.temp.min}&deg;</p>\n         </Card.Body>\n      </Card>\n   );\n};\nexport default ForecastCard;\n","import React from 'react';\nimport { Container, Card, Row, Col } from 'react-bootstrap';\nimport { useQuery } from 'react-query';\nimport { getForecast } from '../utils/api';\nimport ForecastCard from './ForecastCard';\nconst FiveDayCard = ({ city, coord }) => {\n   const { isError, isLoading, data } = useQuery(['forecast', coord.lon], () => getForecast(coord));\n   if (isError) return <h2>error</h2>;\n   if (isLoading) return <h2>loading...</h2>;\n   data.daily.pop();\n   // console.log(data);\n   return (\n      <Container className=\"my-2\">\n         <Card>\n            <Card.Body>\n               <Card.Title className=\"caps\">{city}'s 7 Day Forecast:</Card.Title>\n               <Row>\n                  {data.daily.map(data => {\n                     return (\n                        <Col key={data.dt}>\n                           <ForecastCard data={data} />\n                        </Col>\n                     );\n                  })}\n               </Row>\n            </Card.Body>\n         </Card>\n      </Container>\n   );\n};\nexport default FiveDayCard;\n","import React, { useState } from 'react';\nimport { Row, Col, Container } from 'react-bootstrap';\nimport { useQuery } from 'react-query';\nimport { getCurrentWeather } from '../utils/api';\nimport { getSavedCities } from '../utils/localStorage';\nimport moment from 'moment';\n\nimport SearchCard from './SearchCard';\nimport RecentlySearched from './RecentlySearched';\nimport CurrentWeather from './CurrentWeather';\nimport FiveDayCard from './FiveDayCard';\n\nconst Dashboard = () => {\n   const [city, setCity] = useState('New York City');\n   const currentDate = moment().format('MM/DD/YYYY');\n   const [savedCityList, setSavedCityList] = useState(getSavedCities());\n   const { isError, isLoading, data } = useQuery(['cities', city], () => getCurrentWeather(city));\n   if (isError) return <h2>error</h2>;\n   if (isLoading) return <h2>loading...</h2>;\n   return (\n      <Container fluid>\n         <Row>\n            <Col md={12} lg={3}>\n               <Row>\n                  <SearchCard setCity={setCity} setSavedCityList={setSavedCityList} />\n               </Row>\n               <Row>\n                  <RecentlySearched setCity={setCity} savedCityList={savedCityList} setSavedCityList={setSavedCityList} />\n               </Row>\n            </Col>\n            <Col lg={9}>\n               <Row>\n                  <CurrentWeather city={city} coord={data.coord} date={currentDate} />\n               </Row>\n            </Col>\n         </Row>\n         <Row>\n            <FiveDayCard city={city} coord={data.coord} date={currentDate} />\n         </Row>\n      </Container>\n   );\n};\nexport default Dashboard;\n","import React from 'react';\nimport { QueryClientProvider, QueryClient } from 'react-query';\nimport { Container } from 'react-bootstrap';\nimport Header from './components/Header';\nimport Dashboard from './components/Dashboard';\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n   return (\n      <QueryClientProvider client={queryClient}>\n         <Header />\n         <Container fluid>\n            <Dashboard />\n         </Container>\n      </QueryClientProvider>\n   );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}